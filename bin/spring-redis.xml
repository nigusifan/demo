<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<cache:annotation-driven/>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">

		<!-- 最大连接数 -->
		<property name="maxTotal" value="${redis.pool.maxTotal}"/>
		<!-- 最大空闲时间 -->
		<property name="maxIdle" value="${redis.pool.maxIdle}"/>
		<!-- 每次最大连接数 -->
		<property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}"/>
		<!-- 释放扫描的扫描间隔 -->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}"/>
		<!-- 连接的最小空闲时间 -->
		<property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}"/>
		<!-- 连接控歘按时间多久后释放，当空闲时间>该值且空闲连接>最大空闲连接数时直接释放 -->
		<property name="softMinEvictableIdleTimeMillis" value="${redis.pool.softMinEvictableIdleTimeMillis}"/>
		<!-- 获得链接时的最大等待毫秒数，小于0：阻塞不确定时间，默认-1 -->
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
		<!-- 在获得链接的时候检查有效性，默认false -->
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
		<property name="testOnReturn" value="${redis.pool.testOnReturn}"></property>
		<!-- 在空闲时检查有效性，默认false -->
		<property name="testWhileIdle" value="${redis.pool.testWhileIdle}"/>
		<!-- 连接耗尽时是否阻塞，false报异常，true阻塞超时 默认：true-->
		<property name="blockWhenExhausted" value="${redis.pool.blockWhenExhausted}"/>
    </bean>


    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"/>
		<property name="password" value="${redis.password}" />
		<property name="port" value="${redis.port}"/>
		<property name="timeout" value="${redis.timeout}"/>
		<property name="database" value="${redis.dbIndex}"/>
		<property name="usePool" value="${redis.usePool}"/>
		<!--可以通过构造注入或者Set注入两种方式-->
		<property name="poolConfig" ref="jedisPoolConfig"/>
	</bean>


	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
	</bean>

	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg ref="redisTemplate" />
	</bean>

	<bean class="net.intelink.zmframework.util.RedisUtil">
		<property name="cache">
			<bean class="net.intelink.zmframework.util.RedisUtilManager"
				  init-method="init">
				<property name="host" value="${redis.host}" />
				<property name="port" value="${redis.port}" />
				<property name="password" value="${redis.password}" />
				<property name="index" value="${redis.dbIndex}" />
				<property name="expire" value="3600" />
			</bean>
		</property>
	</bean>
</beans> 